{"ast":null,"code":"import { calcGeneratorVelocity, pregenerateKeyframes } from '@motionone/generators';\nimport { isNumber, isString, noopReturn } from '@motionone/utils';\nimport { getUnitConverter } from '../animate/utils/get-unit.es.js';\nimport { transformDefinitions } from '../animate/utils/transforms.es.js';\nimport { getStyleName } from '../animate/utils/get-style-name.es.js';\nfunction canGenerate(value) {\n  return isNumber(value) && !isNaN(value);\n}\nfunction getAsNumber(value) {\n  return isString(value) ? parseFloat(value) : value;\n}\nfunction createGeneratorEasing(createGenerator) {\n  var keyframesCache = new WeakMap();\n  return function () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var generatorCache = new Map();\n    var getGenerator = function getGenerator() {\n      var from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n      var velocity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var isScale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var key = \"\".concat(from, \"-\").concat(to, \"-\").concat(velocity, \"-\").concat(isScale);\n      if (!generatorCache.has(key)) {\n        generatorCache.set(key, createGenerator(Object.assign({\n          from: from,\n          to: to,\n          velocity: velocity,\n          restSpeed: isScale ? 0.05 : 2,\n          restDistance: isScale ? 0.01 : 0.5\n        }, options)));\n      }\n      return generatorCache.get(key);\n    };\n    var getKeyframes = function getKeyframes(generator, toUnit) {\n      if (!keyframesCache.has(generator)) {\n        keyframesCache.set(generator, pregenerateKeyframes(generator, toUnit));\n      }\n      return keyframesCache.get(generator);\n    };\n    return {\n      createAnimation: function createAnimation(keyframes) {\n        var shouldGenerate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        var getOrigin = arguments.length > 2 ? arguments[2] : undefined;\n        var name = arguments.length > 3 ? arguments[3] : undefined;\n        var motionValue = arguments.length > 4 ? arguments[4] : undefined;\n        var settings;\n        var origin;\n        var target;\n        var velocity = 0;\n        var toUnit = noopReturn;\n        var numKeyframes = keyframes.length;\n        /**\n         * If we should generate an animation for this value, run some preperation\n         * like resolving target/origin, finding a unit (if any) and determine if\n         * it is actually possible to generate.\n         */\n        if (shouldGenerate) {\n          toUnit = getUnitConverter(keyframes, name ? transformDefinitions.get(getStyleName(name)) : undefined);\n          var targetDefinition = keyframes[numKeyframes - 1];\n          target = getAsNumber(targetDefinition);\n          if (numKeyframes > 1 && keyframes[0] !== null) {\n            /**\n             * If we have multiple keyframes, take the initial keyframe as the origin.\n             */\n            origin = getAsNumber(keyframes[0]);\n          } else {\n            var prevGenerator = motionValue === null || motionValue === void 0 ? void 0 : motionValue.generator;\n            /**\n             * If we have an existing generator for this value we can use it to resolve\n             * the animation's current value and velocity.\n             */\n            if (prevGenerator) {\n              /**\n               * If we have a generator for this value we can use it to resolve\n               * the animations's current value and velocity.\n               */\n              var animation = motionValue.animation,\n                generatorStartTime = motionValue.generatorStartTime;\n              var startTime = (animation === null || animation === void 0 ? void 0 : animation.startTime) || generatorStartTime || 0;\n              var currentTime = (animation === null || animation === void 0 ? void 0 : animation.currentTime) || performance.now() - startTime;\n              var prevGeneratorCurrent = prevGenerator(currentTime).current;\n              origin = prevGeneratorCurrent;\n              velocity = calcGeneratorVelocity(function (t) {\n                return prevGenerator(t).current;\n              }, currentTime, prevGeneratorCurrent);\n            } else if (getOrigin) {\n              /**\n               * As a last resort, read the origin from the DOM.\n               */\n              origin = getAsNumber(getOrigin());\n            }\n          }\n        }\n        /**\n         * If we've determined it is possible to generate an animation, do so.\n         */\n        if (canGenerate(origin) && canGenerate(target)) {\n          var generator = getGenerator(origin, target, velocity, name === null || name === void 0 ? void 0 : name.includes(\"scale\"));\n          settings = Object.assign(Object.assign({}, getKeyframes(generator, toUnit)), {\n            easing: \"linear\"\n          });\n          // TODO Add test for this\n          if (motionValue) {\n            motionValue.generator = generator;\n            motionValue.generatorStartTime = performance.now();\n          }\n        }\n        /**\n         * If by now we haven't generated a set of keyframes, create a generic generator\n         * based on the provided props that animates from 0-100 to fetch a rough\n         * \"overshootDuration\" - the moment when the generator first hits the animation target.\n         * Then return animation settings that will run a normal animation for that duration.\n         */\n        if (!settings) {\n          var keyframesMetadata = getKeyframes(getGenerator(0, 100));\n          settings = {\n            easing: \"ease\",\n            duration: keyframesMetadata.overshootDuration\n          };\n        }\n        return settings;\n      }\n    };\n  };\n}\nexport { createGeneratorEasing };","map":{"version":3,"names":["calcGeneratorVelocity","pregenerateKeyframes","isNumber","isString","noopReturn","getUnitConverter","transformDefinitions","getStyleName","canGenerate","value","isNaN","getAsNumber","parseFloat","createGeneratorEasing","createGenerator","keyframesCache","WeakMap","options","arguments","length","undefined","generatorCache","Map","getGenerator","from","to","velocity","isScale","key","concat","has","set","Object","assign","restSpeed","restDistance","get","getKeyframes","generator","toUnit","createAnimation","keyframes","shouldGenerate","getOrigin","name","motionValue","settings","origin","target","numKeyframes","targetDefinition","prevGenerator","animation","generatorStartTime","startTime","currentTime","performance","now","prevGeneratorCurrent","current","t","includes","easing","keyframesMetadata","duration","overshootDuration"],"sources":["C:/Users/ferre/OneDrive/Escritorio/portfolio-react/node_modules/@motionone/dom/dist/easing/create-generator-easing.es.js"],"sourcesContent":["import { calcGeneratorVelocity, pregenerateKeyframes } from '@motionone/generators';\nimport { isNumber, isString, noopReturn } from '@motionone/utils';\nimport { getUnitConverter } from '../animate/utils/get-unit.es.js';\nimport { transformDefinitions } from '../animate/utils/transforms.es.js';\nimport { getStyleName } from '../animate/utils/get-style-name.es.js';\n\nfunction canGenerate(value) {\n    return isNumber(value) && !isNaN(value);\n}\nfunction getAsNumber(value) {\n    return isString(value) ? parseFloat(value) : value;\n}\nfunction createGeneratorEasing(createGenerator) {\n    const keyframesCache = new WeakMap();\n    return (options = {}) => {\n        const generatorCache = new Map();\n        const getGenerator = (from = 0, to = 100, velocity = 0, isScale = false) => {\n            const key = `${from}-${to}-${velocity}-${isScale}`;\n            if (!generatorCache.has(key)) {\n                generatorCache.set(key, createGenerator(Object.assign({ from,\n                    to,\n                    velocity, restSpeed: isScale ? 0.05 : 2, restDistance: isScale ? 0.01 : 0.5 }, options)));\n            }\n            return generatorCache.get(key);\n        };\n        const getKeyframes = (generator, toUnit) => {\n            if (!keyframesCache.has(generator)) {\n                keyframesCache.set(generator, pregenerateKeyframes(generator, toUnit));\n            }\n            return keyframesCache.get(generator);\n        };\n        return {\n            createAnimation: (keyframes, shouldGenerate = true, getOrigin, name, motionValue) => {\n                let settings;\n                let origin;\n                let target;\n                let velocity = 0;\n                let toUnit = noopReturn;\n                const numKeyframes = keyframes.length;\n                /**\n                 * If we should generate an animation for this value, run some preperation\n                 * like resolving target/origin, finding a unit (if any) and determine if\n                 * it is actually possible to generate.\n                 */\n                if (shouldGenerate) {\n                    toUnit = getUnitConverter(keyframes, name ? transformDefinitions.get(getStyleName(name)) : undefined);\n                    const targetDefinition = keyframes[numKeyframes - 1];\n                    target = getAsNumber(targetDefinition);\n                    if (numKeyframes > 1 && keyframes[0] !== null) {\n                        /**\n                         * If we have multiple keyframes, take the initial keyframe as the origin.\n                         */\n                        origin = getAsNumber(keyframes[0]);\n                    }\n                    else {\n                        const prevGenerator = motionValue === null || motionValue === void 0 ? void 0 : motionValue.generator;\n                        /**\n                         * If we have an existing generator for this value we can use it to resolve\n                         * the animation's current value and velocity.\n                         */\n                        if (prevGenerator) {\n                            /**\n                             * If we have a generator for this value we can use it to resolve\n                             * the animations's current value and velocity.\n                             */\n                            const { animation, generatorStartTime } = motionValue;\n                            const startTime = (animation === null || animation === void 0 ? void 0 : animation.startTime) || generatorStartTime || 0;\n                            const currentTime = (animation === null || animation === void 0 ? void 0 : animation.currentTime) || performance.now() - startTime;\n                            const prevGeneratorCurrent = prevGenerator(currentTime).current;\n                            origin = prevGeneratorCurrent;\n                            velocity = calcGeneratorVelocity((t) => prevGenerator(t).current, currentTime, prevGeneratorCurrent);\n                        }\n                        else if (getOrigin) {\n                            /**\n                             * As a last resort, read the origin from the DOM.\n                             */\n                            origin = getAsNumber(getOrigin());\n                        }\n                    }\n                }\n                /**\n                 * If we've determined it is possible to generate an animation, do so.\n                 */\n                if (canGenerate(origin) && canGenerate(target)) {\n                    const generator = getGenerator(origin, target, velocity, name === null || name === void 0 ? void 0 : name.includes(\"scale\"));\n                    settings = Object.assign(Object.assign({}, getKeyframes(generator, toUnit)), { easing: \"linear\" });\n                    // TODO Add test for this\n                    if (motionValue) {\n                        motionValue.generator = generator;\n                        motionValue.generatorStartTime = performance.now();\n                    }\n                }\n                /**\n                 * If by now we haven't generated a set of keyframes, create a generic generator\n                 * based on the provided props that animates from 0-100 to fetch a rough\n                 * \"overshootDuration\" - the moment when the generator first hits the animation target.\n                 * Then return animation settings that will run a normal animation for that duration.\n                 */\n                if (!settings) {\n                    const keyframesMetadata = getKeyframes(getGenerator(0, 100));\n                    settings = {\n                        easing: \"ease\",\n                        duration: keyframesMetadata.overshootDuration,\n                    };\n                }\n                return settings;\n            },\n        };\n    };\n}\n\nexport { createGeneratorEasing };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}