{"ast":null,"code":"import { useRef, useContext, useEffect } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useUnmountEffect } from '../utils/use-unmount-effect.mjs';\nimport { usePointerEvent } from '../events/use-pointer-event.mjs';\nimport { PanSession } from './PanSession.mjs';\n\n/**\n *\n * @param handlers -\n * @param ref -\n *\n * @privateRemarks\n * Currently this sets new pan gesture functions every render. The memo route has been explored\n * in the past but ultimately we're still creating new functions every render. An optimisation\n * to explore is creating the pan gestures and loading them into a `ref`.\n *\n * @internal\n */\nfunction usePanGesture(_ref) {\n  var onPan = _ref.onPan,\n    onPanStart = _ref.onPanStart,\n    onPanEnd = _ref.onPanEnd,\n    onPanSessionStart = _ref.onPanSessionStart,\n    visualElement = _ref.visualElement;\n  var hasPanEvents = onPan || onPanStart || onPanEnd || onPanSessionStart;\n  var panSession = useRef(null);\n  var _useContext = useContext(MotionConfigContext),\n    transformPagePoint = _useContext.transformPagePoint;\n  var handlers = {\n    onSessionStart: onPanSessionStart,\n    onStart: onPanStart,\n    onMove: onPan,\n    onEnd: function onEnd(event, info) {\n      panSession.current = null;\n      onPanEnd && onPanEnd(event, info);\n    }\n  };\n  useEffect(function () {\n    if (panSession.current !== null) {\n      panSession.current.updateHandlers(handlers);\n    }\n  });\n  function onPointerDown(event) {\n    panSession.current = new PanSession(event, handlers, {\n      transformPagePoint: transformPagePoint\n    });\n  }\n  usePointerEvent(visualElement, \"pointerdown\", hasPanEvents && onPointerDown);\n  useUnmountEffect(function () {\n    return panSession.current && panSession.current.end();\n  });\n}\nexport { usePanGesture };","map":{"version":3,"names":["useRef","useContext","useEffect","MotionConfigContext","useUnmountEffect","usePointerEvent","PanSession","usePanGesture","_ref","onPan","onPanStart","onPanEnd","onPanSessionStart","visualElement","hasPanEvents","panSession","_useContext","transformPagePoint","handlers","onSessionStart","onStart","onMove","onEnd","event","info","current","updateHandlers","onPointerDown","end"],"sources":["C:/Users/ferre/OneDrive/Escritorio/portfolio-react/node_modules/framer-motion/dist/es/gestures/use-pan-gesture.mjs"],"sourcesContent":["import { useRef, useContext, useEffect } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useUnmountEffect } from '../utils/use-unmount-effect.mjs';\nimport { usePointerEvent } from '../events/use-pointer-event.mjs';\nimport { PanSession } from './PanSession.mjs';\n\n/**\n *\n * @param handlers -\n * @param ref -\n *\n * @privateRemarks\n * Currently this sets new pan gesture functions every render. The memo route has been explored\n * in the past but ultimately we're still creating new functions every render. An optimisation\n * to explore is creating the pan gestures and loading them into a `ref`.\n *\n * @internal\n */\nfunction usePanGesture({ onPan, onPanStart, onPanEnd, onPanSessionStart, visualElement, }) {\n    const hasPanEvents = onPan || onPanStart || onPanEnd || onPanSessionStart;\n    const panSession = useRef(null);\n    const { transformPagePoint } = useContext(MotionConfigContext);\n    const handlers = {\n        onSessionStart: onPanSessionStart,\n        onStart: onPanStart,\n        onMove: onPan,\n        onEnd: (event, info) => {\n            panSession.current = null;\n            onPanEnd && onPanEnd(event, info);\n        },\n    };\n    useEffect(() => {\n        if (panSession.current !== null) {\n            panSession.current.updateHandlers(handlers);\n        }\n    });\n    function onPointerDown(event) {\n        panSession.current = new PanSession(event, handlers, {\n            transformPagePoint,\n        });\n    }\n    usePointerEvent(visualElement, \"pointerdown\", hasPanEvents && onPointerDown);\n    useUnmountEffect(() => panSession.current && panSession.current.end());\n}\n\nexport { usePanGesture };\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AACrD,SAASC,mBAAmB,QAAQ,oCAAoC;AACxE,SAASC,gBAAgB,QAAQ,iCAAiC;AAClE,SAASC,eAAe,QAAQ,iCAAiC;AACjE,SAASC,UAAU,QAAQ,kBAAkB;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAAAC,IAAA,EAAqE;EAAA,IAAlEC,KAAK,GAAAD,IAAA,CAALC,KAAK;IAAEC,UAAU,GAAAF,IAAA,CAAVE,UAAU;IAAEC,QAAQ,GAAAH,IAAA,CAARG,QAAQ;IAAEC,iBAAiB,GAAAJ,IAAA,CAAjBI,iBAAiB;IAAEC,aAAa,GAAAL,IAAA,CAAbK,aAAa;EAClF,IAAMC,YAAY,GAAGL,KAAK,IAAIC,UAAU,IAAIC,QAAQ,IAAIC,iBAAiB;EACzE,IAAMG,UAAU,GAAGf,MAAM,CAAC,IAAI,CAAC;EAC/B,IAAAgB,WAAA,GAA+Bf,UAAU,CAACE,mBAAmB,CAAC;IAAtDc,kBAAkB,GAAAD,WAAA,CAAlBC,kBAAkB;EAC1B,IAAMC,QAAQ,GAAG;IACbC,cAAc,EAAEP,iBAAiB;IACjCQ,OAAO,EAAEV,UAAU;IACnBW,MAAM,EAAEZ,KAAK;IACba,KAAK,EAAE,SAAAA,MAACC,KAAK,EAAEC,IAAI,EAAK;MACpBT,UAAU,CAACU,OAAO,GAAG,IAAI;MACzBd,QAAQ,IAAIA,QAAQ,CAACY,KAAK,EAAEC,IAAI,CAAC;IACrC;EACJ,CAAC;EACDtB,SAAS,CAAC,YAAM;IACZ,IAAIa,UAAU,CAACU,OAAO,KAAK,IAAI,EAAE;MAC7BV,UAAU,CAACU,OAAO,CAACC,cAAc,CAACR,QAAQ,CAAC;IAC/C;EACJ,CAAC,CAAC;EACF,SAASS,aAAaA,CAACJ,KAAK,EAAE;IAC1BR,UAAU,CAACU,OAAO,GAAG,IAAInB,UAAU,CAACiB,KAAK,EAAEL,QAAQ,EAAE;MACjDD,kBAAkB,EAAlBA;IACJ,CAAC,CAAC;EACN;EACAZ,eAAe,CAACQ,aAAa,EAAE,aAAa,EAAEC,YAAY,IAAIa,aAAa,CAAC;EAC5EvB,gBAAgB,CAAC;IAAA,OAAMW,UAAU,CAACU,OAAO,IAAIV,UAAU,CAACU,OAAO,CAACG,GAAG,CAAC,CAAC;EAAA,EAAC;AAC1E;AAEA,SAASrB,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}