{"ast":null,"code":"import _objectSpread from \"C:/Users/ferre/OneDrive/Escritorio/portfolio-react/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { warning } from 'hey-listen';\nimport { secondsToMilliseconds } from '../utils/time-conversion.mjs';\nimport { instantAnimationState } from '../utils/use-instant-transition-state.mjs';\nimport { createAcceleratedAnimation } from './waapi/create-accelerated-animation.mjs';\nimport { createInstantAnimation } from './create-instant-animation.mjs';\nimport { animate } from './legacy-popmotion/index.mjs';\nimport { inertia } from './legacy-popmotion/inertia.mjs';\nimport { getDefaultTransition } from './utils/default-transitions.mjs';\nimport { isAnimatable } from './utils/is-animatable.mjs';\nimport { getKeyframes } from './utils/keyframes.mjs';\nimport { getValueTransition, isTransitionDefined } from './utils/transitions.mjs';\nvar createMotionValueAnimation = function createMotionValueAnimation(valueName, value, target) {\n  var transition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return function (_onComplete) {\n    var valueTransition = getValueTransition(transition, valueName) || {};\n    /**\n     * Most transition values are currently completely overwritten by value-specific\n     * transitions. In the future it'd be nicer to blend these transitions. But for now\n     * delay actually does inherit from the root transition if not value-specific.\n     */\n    var delay = valueTransition.delay || transition.delay || 0;\n    /**\n     * Elapsed isn't a public transition option but can be passed through from\n     * optimized appear effects in milliseconds.\n     */\n    var _transition$elapsed = transition.elapsed,\n      elapsed = _transition$elapsed === void 0 ? 0 : _transition$elapsed;\n    elapsed = elapsed - secondsToMilliseconds(delay);\n    var keyframes = getKeyframes(value, valueName, target, valueTransition);\n    /**\n     * Check if we're able to animate between the start and end keyframes,\n     * and throw a warning if we're attempting to animate between one that's\n     * animatable and another that isn't.\n     */\n    var originKeyframe = keyframes[0];\n    var targetKeyframe = keyframes[keyframes.length - 1];\n    var isOriginAnimatable = isAnimatable(valueName, originKeyframe);\n    var isTargetAnimatable = isAnimatable(valueName, targetKeyframe);\n    warning(isOriginAnimatable === isTargetAnimatable, \"You are trying to animate \".concat(valueName, \" from \\\"\").concat(originKeyframe, \"\\\" to \\\"\").concat(targetKeyframe, \"\\\". \").concat(originKeyframe, \" is not an animatable value - to enable this animation set \").concat(originKeyframe, \" to a value animatable to \").concat(targetKeyframe, \" via the `style` property.\"));\n    var options = _objectSpread(_objectSpread({\n      keyframes: keyframes,\n      velocity: value.getVelocity()\n    }, valueTransition), {}, {\n      elapsed: elapsed,\n      onUpdate: function onUpdate(v) {\n        value.set(v);\n        valueTransition.onUpdate && valueTransition.onUpdate(v);\n      },\n      onComplete: function onComplete() {\n        _onComplete();\n        valueTransition.onComplete && valueTransition.onComplete();\n      }\n    });\n    if (!isOriginAnimatable || !isTargetAnimatable || instantAnimationState.current || valueTransition.type === false) {\n      /**\n       * If we can't animate this value, or the global instant animation flag is set,\n       * or this is simply defined as an instant transition, return an instant transition.\n       */\n      return createInstantAnimation(options);\n    } else if (valueTransition.type === \"inertia\") {\n      /**\n       * If this is an inertia animation, we currently don't support pre-generating\n       * keyframes for this as such it must always run on the main thread.\n       */\n      return inertia(options);\n    }\n    /**\n     * If there's no transition defined for this value, we can generate\n     * unqiue transition settings for this value.\n     */\n    if (!isTransitionDefined(valueTransition)) {\n      options = _objectSpread(_objectSpread({}, options), getDefaultTransition(valueName, options));\n    }\n    /**\n     * Both WAAPI and our internal animation functions use durations\n     * as defined by milliseconds, while our external API defines them\n     * as seconds.\n     */\n    if (options.duration) {\n      options.duration = secondsToMilliseconds(options.duration);\n    }\n    if (options.repeatDelay) {\n      options.repeatDelay = secondsToMilliseconds(options.repeatDelay);\n    }\n    var visualElement = value.owner;\n    var element = visualElement && visualElement.current;\n    /**\n     * Animate via WAAPI if possible.\n     */\n    if (visualElement && element instanceof HTMLElement && !(visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onUpdate)) {\n      var acceleratedAnimation = createAcceleratedAnimation(value, valueName, options);\n      if (acceleratedAnimation) return acceleratedAnimation;\n    }\n    /**\n     * If we didn't create an accelerated animation, create a JS animation\n     */\n    return animate(options);\n  };\n};\nexport { createMotionValueAnimation };","map":{"version":3,"names":["warning","secondsToMilliseconds","instantAnimationState","createAcceleratedAnimation","createInstantAnimation","animate","inertia","getDefaultTransition","isAnimatable","getKeyframes","getValueTransition","isTransitionDefined","createMotionValueAnimation","valueName","value","target","transition","arguments","length","undefined","onComplete","valueTransition","delay","_transition$elapsed","elapsed","keyframes","originKeyframe","targetKeyframe","isOriginAnimatable","isTargetAnimatable","concat","options","_objectSpread","velocity","getVelocity","onUpdate","v","set","current","type","duration","repeatDelay","visualElement","owner","element","HTMLElement","getProps","acceleratedAnimation"],"sources":["C:/Users/ferre/OneDrive/Escritorio/portfolio-react/node_modules/framer-motion/dist/es/animation/index.mjs"],"sourcesContent":["import { warning } from 'hey-listen';\nimport { secondsToMilliseconds } from '../utils/time-conversion.mjs';\nimport { instantAnimationState } from '../utils/use-instant-transition-state.mjs';\nimport { createAcceleratedAnimation } from './waapi/create-accelerated-animation.mjs';\nimport { createInstantAnimation } from './create-instant-animation.mjs';\nimport { animate } from './legacy-popmotion/index.mjs';\nimport { inertia } from './legacy-popmotion/inertia.mjs';\nimport { getDefaultTransition } from './utils/default-transitions.mjs';\nimport { isAnimatable } from './utils/is-animatable.mjs';\nimport { getKeyframes } from './utils/keyframes.mjs';\nimport { getValueTransition, isTransitionDefined } from './utils/transitions.mjs';\n\nconst createMotionValueAnimation = (valueName, value, target, transition = {}) => {\n    return (onComplete) => {\n        const valueTransition = getValueTransition(transition, valueName) || {};\n        /**\n         * Most transition values are currently completely overwritten by value-specific\n         * transitions. In the future it'd be nicer to blend these transitions. But for now\n         * delay actually does inherit from the root transition if not value-specific.\n         */\n        const delay = valueTransition.delay || transition.delay || 0;\n        /**\n         * Elapsed isn't a public transition option but can be passed through from\n         * optimized appear effects in milliseconds.\n         */\n        let { elapsed = 0 } = transition;\n        elapsed = elapsed - secondsToMilliseconds(delay);\n        const keyframes = getKeyframes(value, valueName, target, valueTransition);\n        /**\n         * Check if we're able to animate between the start and end keyframes,\n         * and throw a warning if we're attempting to animate between one that's\n         * animatable and another that isn't.\n         */\n        const originKeyframe = keyframes[0];\n        const targetKeyframe = keyframes[keyframes.length - 1];\n        const isOriginAnimatable = isAnimatable(valueName, originKeyframe);\n        const isTargetAnimatable = isAnimatable(valueName, targetKeyframe);\n        warning(isOriginAnimatable === isTargetAnimatable, `You are trying to animate ${valueName} from \"${originKeyframe}\" to \"${targetKeyframe}\". ${originKeyframe} is not an animatable value - to enable this animation set ${originKeyframe} to a value animatable to ${targetKeyframe} via the \\`style\\` property.`);\n        let options = {\n            keyframes,\n            velocity: value.getVelocity(),\n            ...valueTransition,\n            elapsed,\n            onUpdate: (v) => {\n                value.set(v);\n                valueTransition.onUpdate && valueTransition.onUpdate(v);\n            },\n            onComplete: () => {\n                onComplete();\n                valueTransition.onComplete && valueTransition.onComplete();\n            },\n        };\n        if (!isOriginAnimatable ||\n            !isTargetAnimatable ||\n            instantAnimationState.current ||\n            valueTransition.type === false) {\n            /**\n             * If we can't animate this value, or the global instant animation flag is set,\n             * or this is simply defined as an instant transition, return an instant transition.\n             */\n            return createInstantAnimation(options);\n        }\n        else if (valueTransition.type === \"inertia\") {\n            /**\n             * If this is an inertia animation, we currently don't support pre-generating\n             * keyframes for this as such it must always run on the main thread.\n             */\n            return inertia(options);\n        }\n        /**\n         * If there's no transition defined for this value, we can generate\n         * unqiue transition settings for this value.\n         */\n        if (!isTransitionDefined(valueTransition)) {\n            options = {\n                ...options,\n                ...getDefaultTransition(valueName, options),\n            };\n        }\n        /**\n         * Both WAAPI and our internal animation functions use durations\n         * as defined by milliseconds, while our external API defines them\n         * as seconds.\n         */\n        if (options.duration) {\n            options.duration = secondsToMilliseconds(options.duration);\n        }\n        if (options.repeatDelay) {\n            options.repeatDelay = secondsToMilliseconds(options.repeatDelay);\n        }\n        const visualElement = value.owner;\n        const element = visualElement && visualElement.current;\n        /**\n         * Animate via WAAPI if possible.\n         */\n        if (visualElement &&\n            element instanceof HTMLElement &&\n            !(visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onUpdate)) {\n            const acceleratedAnimation = createAcceleratedAnimation(value, valueName, options);\n            if (acceleratedAnimation)\n                return acceleratedAnimation;\n        }\n        /**\n         * If we didn't create an accelerated animation, create a JS animation\n         */\n        return animate(options);\n    };\n};\n\nexport { createMotionValueAnimation };\n"],"mappings":";AAAA,SAASA,OAAO,QAAQ,YAAY;AACpC,SAASC,qBAAqB,QAAQ,8BAA8B;AACpE,SAASC,qBAAqB,QAAQ,2CAA2C;AACjF,SAASC,0BAA0B,QAAQ,0CAA0C;AACrF,SAASC,sBAAsB,QAAQ,gCAAgC;AACvE,SAASC,OAAO,QAAQ,8BAA8B;AACtD,SAASC,OAAO,QAAQ,gCAAgC;AACxD,SAASC,oBAAoB,QAAQ,iCAAiC;AACtE,SAASC,YAAY,QAAQ,2BAA2B;AACxD,SAASC,YAAY,QAAQ,uBAAuB;AACpD,SAASC,kBAAkB,EAAEC,mBAAmB,QAAQ,yBAAyB;AAEjF,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA0BA,CAAIC,SAAS,EAAEC,KAAK,EAAEC,MAAM,EAAsB;EAAA,IAApBC,UAAU,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EACzE,OAAO,UAACG,WAAU,EAAK;IACnB,IAAMC,eAAe,GAAGX,kBAAkB,CAACM,UAAU,EAAEH,SAAS,CAAC,IAAI,CAAC,CAAC;IACvE;AACR;AACA;AACA;AACA;IACQ,IAAMS,KAAK,GAAGD,eAAe,CAACC,KAAK,IAAIN,UAAU,CAACM,KAAK,IAAI,CAAC;IAC5D;AACR;AACA;AACA;IACQ,IAAAC,mBAAA,GAAsBP,UAAU,CAA1BQ,OAAO;MAAPA,OAAO,GAAAD,mBAAA,cAAG,CAAC,GAAAA,mBAAA;IACjBC,OAAO,GAAGA,OAAO,GAAGvB,qBAAqB,CAACqB,KAAK,CAAC;IAChD,IAAMG,SAAS,GAAGhB,YAAY,CAACK,KAAK,EAAED,SAAS,EAAEE,MAAM,EAAEM,eAAe,CAAC;IACzE;AACR;AACA;AACA;AACA;IACQ,IAAMK,cAAc,GAAGD,SAAS,CAAC,CAAC,CAAC;IACnC,IAAME,cAAc,GAAGF,SAAS,CAACA,SAAS,CAACP,MAAM,GAAG,CAAC,CAAC;IACtD,IAAMU,kBAAkB,GAAGpB,YAAY,CAACK,SAAS,EAAEa,cAAc,CAAC;IAClE,IAAMG,kBAAkB,GAAGrB,YAAY,CAACK,SAAS,EAAEc,cAAc,CAAC;IAClE3B,OAAO,CAAC4B,kBAAkB,KAAKC,kBAAkB,+BAAAC,MAAA,CAA+BjB,SAAS,cAAAiB,MAAA,CAAUJ,cAAc,cAAAI,MAAA,CAASH,cAAc,UAAAG,MAAA,CAAMJ,cAAc,iEAAAI,MAAA,CAA8DJ,cAAc,gCAAAI,MAAA,CAA6BH,cAAc,+BAA8B,CAAC;IAClT,IAAII,OAAO,GAAAC,aAAA,CAAAA,aAAA;MACPP,SAAS,EAATA,SAAS;MACTQ,QAAQ,EAAEnB,KAAK,CAACoB,WAAW,CAAC;IAAC,GAC1Bb,eAAe;MAClBG,OAAO,EAAPA,OAAO;MACPW,QAAQ,EAAE,SAAAA,SAACC,CAAC,EAAK;QACbtB,KAAK,CAACuB,GAAG,CAACD,CAAC,CAAC;QACZf,eAAe,CAACc,QAAQ,IAAId,eAAe,CAACc,QAAQ,CAACC,CAAC,CAAC;MAC3D,CAAC;MACDhB,UAAU,EAAE,SAAAA,WAAA,EAAM;QACdA,WAAU,CAAC,CAAC;QACZC,eAAe,CAACD,UAAU,IAAIC,eAAe,CAACD,UAAU,CAAC,CAAC;MAC9D;IAAC,EACJ;IACD,IAAI,CAACQ,kBAAkB,IACnB,CAACC,kBAAkB,IACnB3B,qBAAqB,CAACoC,OAAO,IAC7BjB,eAAe,CAACkB,IAAI,KAAK,KAAK,EAAE;MAChC;AACZ;AACA;AACA;MACY,OAAOnC,sBAAsB,CAAC2B,OAAO,CAAC;IAC1C,CAAC,MACI,IAAIV,eAAe,CAACkB,IAAI,KAAK,SAAS,EAAE;MACzC;AACZ;AACA;AACA;MACY,OAAOjC,OAAO,CAACyB,OAAO,CAAC;IAC3B;IACA;AACR;AACA;AACA;IACQ,IAAI,CAACpB,mBAAmB,CAACU,eAAe,CAAC,EAAE;MACvCU,OAAO,GAAAC,aAAA,CAAAA,aAAA,KACAD,OAAO,GACPxB,oBAAoB,CAACM,SAAS,EAAEkB,OAAO,CAAC,CAC9C;IACL;IACA;AACR;AACA;AACA;AACA;IACQ,IAAIA,OAAO,CAACS,QAAQ,EAAE;MAClBT,OAAO,CAACS,QAAQ,GAAGvC,qBAAqB,CAAC8B,OAAO,CAACS,QAAQ,CAAC;IAC9D;IACA,IAAIT,OAAO,CAACU,WAAW,EAAE;MACrBV,OAAO,CAACU,WAAW,GAAGxC,qBAAqB,CAAC8B,OAAO,CAACU,WAAW,CAAC;IACpE;IACA,IAAMC,aAAa,GAAG5B,KAAK,CAAC6B,KAAK;IACjC,IAAMC,OAAO,GAAGF,aAAa,IAAIA,aAAa,CAACJ,OAAO;IACtD;AACR;AACA;IACQ,IAAII,aAAa,IACbE,OAAO,YAAYC,WAAW,IAC9B,EAAEH,aAAa,KAAK,IAAI,IAAIA,aAAa,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,aAAa,CAACI,QAAQ,CAAC,CAAC,CAACX,QAAQ,CAAC,EAAE;MACpG,IAAMY,oBAAoB,GAAG5C,0BAA0B,CAACW,KAAK,EAAED,SAAS,EAAEkB,OAAO,CAAC;MAClF,IAAIgB,oBAAoB,EACpB,OAAOA,oBAAoB;IACnC;IACA;AACR;AACA;IACQ,OAAO1C,OAAO,CAAC0B,OAAO,CAAC;EAC3B,CAAC;AACL,CAAC;AAED,SAASnB,0BAA0B"},"metadata":{},"sourceType":"module","externalDependencies":[]}