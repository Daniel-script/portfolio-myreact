{"ast":null,"code":"import _defineProperty from \"C:/Users/ferre/OneDrive/Escritorio/portfolio-react/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { getAnimationData, getMotionValue } from './data.es.js';\nimport { isCssVar, registerCssVariable } from './utils/css-var.es.js';\nimport { defaults, isEasingGenerator, isFunction, isEasingList, isNumber, time, noop } from '@motionone/utils';\nimport { isTransform, addTransformToElement, transformDefinitions } from './utils/transforms.es.js';\nimport { convertEasing } from './utils/easing.es.js';\nimport { supports } from './utils/feature-detection.es.js';\nimport { hydrateKeyframes, keyframesList } from './utils/keyframes.es.js';\nimport { style } from './style.es.js';\nimport { getStyleName } from './utils/get-style-name.es.js';\nimport { stopAnimation } from './utils/stop-animation.es.js';\nimport { getUnitConverter } from './utils/get-unit.es.js';\nfunction getDevToolsRecord() {\n  return window.__MOTION_DEV_TOOLS_RECORD;\n}\nfunction animateStyle(element, key, keyframesDefinition) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var AnimationPolyfill = arguments.length > 4 ? arguments[4] : undefined;\n  var record = getDevToolsRecord();\n  var isRecording = options.record !== false && record;\n  var animation;\n  var _options$duration = options.duration,\n    duration = _options$duration === void 0 ? defaults.duration : _options$duration,\n    _options$delay = options.delay,\n    delay = _options$delay === void 0 ? defaults.delay : _options$delay,\n    _options$endDelay = options.endDelay,\n    endDelay = _options$endDelay === void 0 ? defaults.endDelay : _options$endDelay,\n    _options$repeat = options.repeat,\n    repeat = _options$repeat === void 0 ? defaults.repeat : _options$repeat,\n    _options$easing = options.easing,\n    easing = _options$easing === void 0 ? defaults.easing : _options$easing,\n    _options$persist = options.persist,\n    persist = _options$persist === void 0 ? false : _options$persist,\n    direction = options.direction,\n    offset = options.offset,\n    _options$allowWebkitA = options.allowWebkitAcceleration,\n    allowWebkitAcceleration = _options$allowWebkitA === void 0 ? false : _options$allowWebkitA;\n  var data = getAnimationData(element);\n  var valueIsTransform = isTransform(key);\n  var canAnimateNatively = supports.waapi();\n  /**\n   * If this is an individual transform, we need to map its\n   * key to a CSS variable and update the element's transform style\n   */\n  valueIsTransform && addTransformToElement(element, key);\n  var name = getStyleName(key);\n  var motionValue = getMotionValue(data.values, name);\n  /**\n   * Get definition of value, this will be used to convert numerical\n   * keyframes into the default value type.\n   */\n  var definition = transformDefinitions.get(name);\n  /**\n   * Stop the current animation, if any. Because this will trigger\n   * commitStyles (DOM writes) and we might later trigger DOM reads,\n   * this is fired now and we return a factory function to create\n   * the actual animation that can get called in batch,\n   */\n  stopAnimation(motionValue.animation, !(isEasingGenerator(easing) && motionValue.generator) && options.record !== false);\n  /**\n   * Batchable factory function containing all DOM reads.\n   */\n  return function () {\n    var readInitialValue = function readInitialValue() {\n      var _a, _b;\n      return (_b = (_a = style.get(element, name)) !== null && _a !== void 0 ? _a : definition === null || definition === void 0 ? void 0 : definition.initialValue) !== null && _b !== void 0 ? _b : 0;\n    };\n    /**\n     * Replace null values with the previous keyframe value, or read\n     * it from the DOM if it's the first keyframe.\n     */\n    var keyframes = hydrateKeyframes(keyframesList(keyframesDefinition), readInitialValue);\n    /**\n     * Detect unit type of keyframes.\n     */\n    var toUnit = getUnitConverter(keyframes, definition);\n    if (isEasingGenerator(easing)) {\n      var custom = easing.createAnimation(keyframes, key !== \"opacity\", readInitialValue, name, motionValue);\n      easing = custom.easing;\n      keyframes = custom.keyframes || keyframes;\n      duration = custom.duration || duration;\n    }\n    /**\n     * If this is a CSS variable we need to register it with the browser\n     * before it can be animated natively. We also set it with setProperty\n     * rather than directly onto the element.style object.\n     */\n    if (isCssVar(name)) {\n      if (supports.cssRegisterProperty()) {\n        registerCssVariable(name);\n      } else {\n        canAnimateNatively = false;\n      }\n    }\n    /**\n     * If we've been passed a custom easing function, and this browser\n     * does **not** support linear() easing, and the value is a transform\n     * (and thus a pure number) we can still support the custom easing\n     * by falling back to the animation polyfill.\n     */\n    if (valueIsTransform && !supports.linearEasing() && (isFunction(easing) || isEasingList(easing) && easing.some(isFunction))) {\n      canAnimateNatively = false;\n    }\n    /**\n     * If we can animate this value with WAAPI, do so.\n     */\n    if (canAnimateNatively) {\n      var _element$animate;\n      /**\n       * Convert numbers to default value types. Currently this only supports\n       * transforms but it could also support other value types.\n       */\n      if (definition) {\n        keyframes = keyframes.map(function (value) {\n          return isNumber(value) ? definition.toDefaultUnit(value) : value;\n        });\n      }\n      /**\n       * If this browser doesn't support partial/implicit keyframes we need to\n       * explicitly provide one.\n       */\n      if (keyframes.length === 1 && (!supports.partialKeyframes() || isRecording)) {\n        keyframes.unshift(readInitialValue());\n      }\n      var animationOptions = {\n        delay: time.ms(delay),\n        duration: time.ms(duration),\n        endDelay: time.ms(endDelay),\n        easing: !isEasingList(easing) ? convertEasing(easing, duration) : undefined,\n        direction: direction,\n        iterations: repeat + 1,\n        fill: \"both\"\n      };\n      animation = element.animate((_element$animate = {}, _defineProperty(_element$animate, name, keyframes), _defineProperty(_element$animate, \"offset\", offset), _defineProperty(_element$animate, \"easing\", isEasingList(easing) ? easing.map(function (thisEasing) {\n        return convertEasing(thisEasing, duration);\n      }) : undefined), _element$animate), animationOptions);\n      /**\n       * Polyfill finished Promise in browsers that don't support it\n       */\n      if (!animation.finished) {\n        animation.finished = new Promise(function (resolve, reject) {\n          animation.onfinish = resolve;\n          animation.oncancel = reject;\n        });\n      }\n      var target = keyframes[keyframes.length - 1];\n      animation.finished.then(function () {\n        if (persist) return;\n        // Apply styles to target\n        style.set(element, name, target);\n        // Ensure fill modes don't persist\n        animation.cancel();\n      }).catch(noop);\n      /**\n       * This forces Webkit to run animations on the main thread by exploiting\n       * this condition:\n       * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/platform/graphics/ca/GraphicsLayerCA.cpp?rev=281238#L1099\n       *\n       * This fixes Webkit's timing bugs, like accelerated animations falling\n       * out of sync with main thread animations and massive delays in starting\n       * accelerated animations in WKWebView.\n       */\n      if (!allowWebkitAcceleration) animation.playbackRate = 1.000001;\n      /**\n       * If we can't animate the value natively then we can fallback to the numbers-only\n       * polyfill for transforms.\n       */\n    } else if (AnimationPolyfill && valueIsTransform) {\n      /**\n       * If any keyframe is a string (because we measured it from the DOM), we need to convert\n       * it into a number before passing to the Animation polyfill.\n       */\n      keyframes = keyframes.map(function (value) {\n        return typeof value === \"string\" ? parseFloat(value) : value;\n      });\n      /**\n       * If we only have a single keyframe, we need to create an initial keyframe by reading\n       * the current value from the DOM.\n       */\n      if (keyframes.length === 1) {\n        keyframes.unshift(parseFloat(readInitialValue()));\n      }\n      animation = new AnimationPolyfill(function (latest) {\n        style.set(element, name, toUnit ? toUnit(latest) : latest);\n      }, keyframes, Object.assign(Object.assign({}, options), {\n        duration: duration,\n        easing: easing\n      }));\n    } else {\n      var _target = keyframes[keyframes.length - 1];\n      style.set(element, name, definition && isNumber(_target) ? definition.toDefaultUnit(_target) : _target);\n    }\n    if (isRecording) {\n      record(element, key, keyframes, {\n        duration: duration,\n        delay: delay,\n        easing: easing,\n        repeat: repeat,\n        offset: offset\n      }, \"motion-one\");\n    }\n    motionValue.setAnimation(animation);\n    return animation;\n  };\n}\nexport { animateStyle };","map":{"version":3,"names":["getAnimationData","getMotionValue","isCssVar","registerCssVariable","defaults","isEasingGenerator","isFunction","isEasingList","isNumber","time","noop","isTransform","addTransformToElement","transformDefinitions","convertEasing","supports","hydrateKeyframes","keyframesList","style","getStyleName","stopAnimation","getUnitConverter","getDevToolsRecord","window","__MOTION_DEV_TOOLS_RECORD","animateStyle","element","key","keyframesDefinition","options","arguments","length","undefined","AnimationPolyfill","record","isRecording","animation","_options$duration","duration","_options$delay","delay","_options$endDelay","endDelay","_options$repeat","repeat","_options$easing","easing","_options$persist","persist","direction","offset","_options$allowWebkitA","allowWebkitAcceleration","data","valueIsTransform","canAnimateNatively","waapi","name","motionValue","values","definition","get","generator","readInitialValue","_a","_b","initialValue","keyframes","toUnit","custom","createAnimation","cssRegisterProperty","linearEasing","some","_element$animate","map","value","toDefaultUnit","partialKeyframes","unshift","animationOptions","ms","iterations","fill","animate","_defineProperty","thisEasing","finished","Promise","resolve","reject","onfinish","oncancel","target","then","set","cancel","catch","playbackRate","parseFloat","latest","Object","assign","setAnimation"],"sources":["C:/Users/ferre/OneDrive/Escritorio/portfolio-react/node_modules/@motionone/dom/dist/animate/animate-style.es.js"],"sourcesContent":["import { getAnimationData, getMotionValue } from './data.es.js';\nimport { isCssVar, registerCssVariable } from './utils/css-var.es.js';\nimport { defaults, isEasingGenerator, isFunction, isEasingList, isNumber, time, noop } from '@motionone/utils';\nimport { isTransform, addTransformToElement, transformDefinitions } from './utils/transforms.es.js';\nimport { convertEasing } from './utils/easing.es.js';\nimport { supports } from './utils/feature-detection.es.js';\nimport { hydrateKeyframes, keyframesList } from './utils/keyframes.es.js';\nimport { style } from './style.es.js';\nimport { getStyleName } from './utils/get-style-name.es.js';\nimport { stopAnimation } from './utils/stop-animation.es.js';\nimport { getUnitConverter } from './utils/get-unit.es.js';\n\nfunction getDevToolsRecord() {\n    return window.__MOTION_DEV_TOOLS_RECORD;\n}\nfunction animateStyle(element, key, keyframesDefinition, options = {}, AnimationPolyfill) {\n    const record = getDevToolsRecord();\n    const isRecording = options.record !== false && record;\n    let animation;\n    let { duration = defaults.duration, delay = defaults.delay, endDelay = defaults.endDelay, repeat = defaults.repeat, easing = defaults.easing, persist = false, direction, offset, allowWebkitAcceleration = false, } = options;\n    const data = getAnimationData(element);\n    const valueIsTransform = isTransform(key);\n    let canAnimateNatively = supports.waapi();\n    /**\n     * If this is an individual transform, we need to map its\n     * key to a CSS variable and update the element's transform style\n     */\n    valueIsTransform && addTransformToElement(element, key);\n    const name = getStyleName(key);\n    const motionValue = getMotionValue(data.values, name);\n    /**\n     * Get definition of value, this will be used to convert numerical\n     * keyframes into the default value type.\n     */\n    const definition = transformDefinitions.get(name);\n    /**\n     * Stop the current animation, if any. Because this will trigger\n     * commitStyles (DOM writes) and we might later trigger DOM reads,\n     * this is fired now and we return a factory function to create\n     * the actual animation that can get called in batch,\n     */\n    stopAnimation(motionValue.animation, !(isEasingGenerator(easing) && motionValue.generator) &&\n        options.record !== false);\n    /**\n     * Batchable factory function containing all DOM reads.\n     */\n    return () => {\n        const readInitialValue = () => { var _a, _b; return (_b = (_a = style.get(element, name)) !== null && _a !== void 0 ? _a : definition === null || definition === void 0 ? void 0 : definition.initialValue) !== null && _b !== void 0 ? _b : 0; };\n        /**\n         * Replace null values with the previous keyframe value, or read\n         * it from the DOM if it's the first keyframe.\n         */\n        let keyframes = hydrateKeyframes(keyframesList(keyframesDefinition), readInitialValue);\n        /**\n         * Detect unit type of keyframes.\n         */\n        const toUnit = getUnitConverter(keyframes, definition);\n        if (isEasingGenerator(easing)) {\n            const custom = easing.createAnimation(keyframes, key !== \"opacity\", readInitialValue, name, motionValue);\n            easing = custom.easing;\n            keyframes = custom.keyframes || keyframes;\n            duration = custom.duration || duration;\n        }\n        /**\n         * If this is a CSS variable we need to register it with the browser\n         * before it can be animated natively. We also set it with setProperty\n         * rather than directly onto the element.style object.\n         */\n        if (isCssVar(name)) {\n            if (supports.cssRegisterProperty()) {\n                registerCssVariable(name);\n            }\n            else {\n                canAnimateNatively = false;\n            }\n        }\n        /**\n         * If we've been passed a custom easing function, and this browser\n         * does **not** support linear() easing, and the value is a transform\n         * (and thus a pure number) we can still support the custom easing\n         * by falling back to the animation polyfill.\n         */\n        if (valueIsTransform &&\n            !supports.linearEasing() &&\n            (isFunction(easing) || (isEasingList(easing) && easing.some(isFunction)))) {\n            canAnimateNatively = false;\n        }\n        /**\n         * If we can animate this value with WAAPI, do so.\n         */\n        if (canAnimateNatively) {\n            /**\n             * Convert numbers to default value types. Currently this only supports\n             * transforms but it could also support other value types.\n             */\n            if (definition) {\n                keyframes = keyframes.map((value) => isNumber(value) ? definition.toDefaultUnit(value) : value);\n            }\n            /**\n             * If this browser doesn't support partial/implicit keyframes we need to\n             * explicitly provide one.\n             */\n            if (keyframes.length === 1 &&\n                (!supports.partialKeyframes() || isRecording)) {\n                keyframes.unshift(readInitialValue());\n            }\n            const animationOptions = {\n                delay: time.ms(delay),\n                duration: time.ms(duration),\n                endDelay: time.ms(endDelay),\n                easing: !isEasingList(easing)\n                    ? convertEasing(easing, duration)\n                    : undefined,\n                direction,\n                iterations: repeat + 1,\n                fill: \"both\",\n            };\n            animation = element.animate({\n                [name]: keyframes,\n                offset,\n                easing: isEasingList(easing)\n                    ? easing.map((thisEasing) => convertEasing(thisEasing, duration))\n                    : undefined,\n            }, animationOptions);\n            /**\n             * Polyfill finished Promise in browsers that don't support it\n             */\n            if (!animation.finished) {\n                animation.finished = new Promise((resolve, reject) => {\n                    animation.onfinish = resolve;\n                    animation.oncancel = reject;\n                });\n            }\n            const target = keyframes[keyframes.length - 1];\n            animation.finished\n                .then(() => {\n                if (persist)\n                    return;\n                // Apply styles to target\n                style.set(element, name, target);\n                // Ensure fill modes don't persist\n                animation.cancel();\n            })\n                .catch(noop);\n            /**\n             * This forces Webkit to run animations on the main thread by exploiting\n             * this condition:\n             * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/platform/graphics/ca/GraphicsLayerCA.cpp?rev=281238#L1099\n             *\n             * This fixes Webkit's timing bugs, like accelerated animations falling\n             * out of sync with main thread animations and massive delays in starting\n             * accelerated animations in WKWebView.\n             */\n            if (!allowWebkitAcceleration)\n                animation.playbackRate = 1.000001;\n            /**\n             * If we can't animate the value natively then we can fallback to the numbers-only\n             * polyfill for transforms.\n             */\n        }\n        else if (AnimationPolyfill && valueIsTransform) {\n            /**\n             * If any keyframe is a string (because we measured it from the DOM), we need to convert\n             * it into a number before passing to the Animation polyfill.\n             */\n            keyframes = keyframes.map((value) => typeof value === \"string\" ? parseFloat(value) : value);\n            /**\n             * If we only have a single keyframe, we need to create an initial keyframe by reading\n             * the current value from the DOM.\n             */\n            if (keyframes.length === 1) {\n                keyframes.unshift(parseFloat(readInitialValue()));\n            }\n            animation = new AnimationPolyfill((latest) => {\n                style.set(element, name, toUnit ? toUnit(latest) : latest);\n            }, keyframes, Object.assign(Object.assign({}, options), { duration,\n                easing }));\n        }\n        else {\n            const target = keyframes[keyframes.length - 1];\n            style.set(element, name, definition && isNumber(target)\n                ? definition.toDefaultUnit(target)\n                : target);\n        }\n        if (isRecording) {\n            record(element, key, keyframes, {\n                duration,\n                delay: delay,\n                easing,\n                repeat,\n                offset,\n            }, \"motion-one\");\n        }\n        motionValue.setAnimation(animation);\n        return animation;\n    };\n}\n\nexport { animateStyle };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}