{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/ferre/OneDrive/Escritorio/portfolio-react/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { transformPropOrder } from './transform.mjs';\nvar translateAlias = {\n  x: \"translateX\",\n  y: \"translateY\",\n  z: \"translateZ\",\n  transformPerspective: \"perspective\"\n};\n/**\n * A function to use with Array.sort to sort transform keys by their default order.\n */\nvar sortTransformProps = function sortTransformProps(a, b) {\n  return transformPropOrder.indexOf(a) - transformPropOrder.indexOf(b);\n};\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform(_ref, _ref2, transformIsDefault, transformTemplate) {\n  var transform = _ref.transform,\n    transformKeys = _ref.transformKeys;\n  var _ref2$enableHardwareA = _ref2.enableHardwareAcceleration,\n    enableHardwareAcceleration = _ref2$enableHardwareA === void 0 ? true : _ref2$enableHardwareA,\n    _ref2$allowTransformN = _ref2.allowTransformNone,\n    allowTransformNone = _ref2$allowTransformN === void 0 ? true : _ref2$allowTransformN;\n  // The transform string we're going to build into.\n  var transformString = \"\";\n  // Transform keys into their default order - this will determine the output order.\n  transformKeys.sort(sortTransformProps);\n  // Loop over each transform and build them into transformString\n  var _iterator = _createForOfIteratorHelper(transformKeys),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var key = _step.value;\n      transformString += \"\".concat(translateAlias[key] || key, \"(\").concat(transform[key], \") \");\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  if (enableHardwareAcceleration && !transform.z) {\n    transformString += \"translateZ(0)\";\n  }\n  transformString = transformString.trim();\n  // If we have a custom `transform` template, pass our transform values and\n  // generated transformString to that before returning\n  if (transformTemplate) {\n    transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n  } else if (allowTransformNone && transformIsDefault) {\n    transformString = \"none\";\n  }\n  return transformString;\n}\nexport { buildTransform };","map":{"version":3,"names":["transformPropOrder","translateAlias","x","y","z","transformPerspective","sortTransformProps","a","b","indexOf","buildTransform","_ref","_ref2","transformIsDefault","transformTemplate","transform","transformKeys","_ref2$enableHardwareA","enableHardwareAcceleration","_ref2$allowTransformN","allowTransformNone","transformString","sort","_iterator","_createForOfIteratorHelper","_step","s","n","done","key","value","concat","err","e","f","trim"],"sources":["C:/Users/ferre/OneDrive/Escritorio/portfolio-react/node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs"],"sourcesContent":["import { transformPropOrder } from './transform.mjs';\n\nconst translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\",\n};\n/**\n * A function to use with Array.sort to sort transform keys by their default order.\n */\nconst sortTransformProps = (a, b) => transformPropOrder.indexOf(a) - transformPropOrder.indexOf(b);\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform({ transform, transformKeys, }, { enableHardwareAcceleration = true, allowTransformNone = true, }, transformIsDefault, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    // Transform keys into their default order - this will determine the output order.\n    transformKeys.sort(sortTransformProps);\n    // Loop over each transform and build them into transformString\n    for (const key of transformKeys) {\n        transformString += `${translateAlias[key] || key}(${transform[key]}) `;\n    }\n    if (enableHardwareAcceleration && !transform.z) {\n        transformString += \"translateZ(0)\";\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    }\n    else if (allowTransformNone && transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n\nexport { buildTransform };\n"],"mappings":";AAAA,SAASA,kBAAkB,QAAQ,iBAAiB;AAEpD,IAAMC,cAAc,GAAG;EACnBC,CAAC,EAAE,YAAY;EACfC,CAAC,EAAE,YAAY;EACfC,CAAC,EAAE,YAAY;EACfC,oBAAoB,EAAE;AAC1B,CAAC;AACD;AACA;AACA;AACA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAIC,CAAC,EAAEC,CAAC;EAAA,OAAKR,kBAAkB,CAACS,OAAO,CAACF,CAAC,CAAC,GAAGP,kBAAkB,CAACS,OAAO,CAACD,CAAC,CAAC;AAAA;AAClG;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,cAAcA,CAAAC,IAAA,EAAAC,KAAA,EAAmGC,kBAAkB,EAAEC,iBAAiB,EAAE;EAAA,IAAvIC,SAAS,GAAAJ,IAAA,CAATI,SAAS;IAAEC,aAAa,GAAAL,IAAA,CAAbK,aAAa;EAAA,IAAAC,qBAAA,GAAAL,KAAA,CAAOM,0BAA0B;IAA1BA,0BAA0B,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA;IAAAE,qBAAA,GAAAP,KAAA,CAAEQ,kBAAkB;IAAlBA,kBAAkB,GAAAD,qBAAA,cAAG,IAAI,GAAAA,qBAAA;EACjH;EACA,IAAIE,eAAe,GAAG,EAAE;EACxB;EACAL,aAAa,CAACM,IAAI,CAAChB,kBAAkB,CAAC;EACtC;EAAA,IAAAiB,SAAA,GAAAC,0BAAA,CACkBR,aAAa;IAAAS,KAAA;EAAA;IAA/B,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAAiC;MAAA,IAAtBC,GAAG,GAAAJ,KAAA,CAAAK,KAAA;MACVT,eAAe,OAAAU,MAAA,CAAO9B,cAAc,CAAC4B,GAAG,CAAC,IAAIA,GAAG,OAAAE,MAAA,CAAIhB,SAAS,CAACc,GAAG,CAAC,OAAI;IAC1E;EAAC,SAAAG,GAAA;IAAAT,SAAA,CAAAU,CAAA,CAAAD,GAAA;EAAA;IAAAT,SAAA,CAAAW,CAAA;EAAA;EACD,IAAIhB,0BAA0B,IAAI,CAACH,SAAS,CAACX,CAAC,EAAE;IAC5CiB,eAAe,IAAI,eAAe;EACtC;EACAA,eAAe,GAAGA,eAAe,CAACc,IAAI,CAAC,CAAC;EACxC;EACA;EACA,IAAIrB,iBAAiB,EAAE;IACnBO,eAAe,GAAGP,iBAAiB,CAACC,SAAS,EAAEF,kBAAkB,GAAG,EAAE,GAAGQ,eAAe,CAAC;EAC7F,CAAC,MACI,IAAID,kBAAkB,IAAIP,kBAAkB,EAAE;IAC/CQ,eAAe,GAAG,MAAM;EAC5B;EACA,OAAOA,eAAe;AAC1B;AAEA,SAASX,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}